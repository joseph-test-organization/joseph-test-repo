name: Publish Release NPM Packages With Yarn

on:
  release:
    types: [published]

jobs:
  test-npm-publish-with-yarn:
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Register npm token
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Verify npm authentication
        run: npm whoami

      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version:  22
          registry-url: 'https://registry.npmjs.org'

      - name: Install and build packages
        run: yarn install

      - name: Verify npm authentication within yarn
        env:
          CI_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn npm whoami

      - name: Publish to npm
        env:
          CI_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn npm publish

  build_and_release_docker:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: "ghcr.io/${{ github.repository_owner }}/joseph-chat"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get full image tag
        id: full_tag
        run: |
          TAG=${{ github.event.release.tag_name }}
          echo "FULL_IMAGE_NAME=${{ env.IMAGE_NAME }}:${TAG#v}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64,linux/amd64

      - name: Print Release Tag
        run: | 
          echo "Releasing image ${{ env.FULL_IMAGE_NAME }} to ghcr"

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64,linux/amd64
          build-args: |
            "GITHUB_SHA=${{ github.sha }}"
          provenance: false
          sbom: false
          pull: true
          push: true
          file: ./Dockerfile
          tags: "${{ env.FULL_IMAGE_NAME }}"
      - 
        name: Pull Image
        run: docker pull "${{ env.FULL_IMAGE_NAME }}"
      - 
        name: Extract Labels from Image
        id: extract-labels
        run: |
          LABELS=$(docker inspect "${{ env.FULL_IMAGE_NAME }}" | jq -r '.[0].Config.Labels | to_entries | map("\(.key)=\(.value)") | join("\n")')
          echo "$LABELS"
          echo "$LABELS" >> labels.txt
          
          # Store in step output
          {
            echo "labels<<EOF"
            echo "$LABELS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - 
        name: Push Labels as Manifest Annotations
        run: |
          # Create annotation arguments for buildx imagetools create
          LABEL_ARGS=$(echo "${{ steps.extract-labels.outputs.labels }}" | grep -v "org.opencontainers.image.licenses=" | awk -F= '{print "--annotation "$1"=\"" $2 "\"" }')
          
          # Recreate the manifest list with annotations
          docker buildx imagetools create \
            $LABEL_ARGS \
            -t "${{ env.FULL_IMAGE_NAME }}" \
            "${{ env.FULL_IMAGE_NAME }}"