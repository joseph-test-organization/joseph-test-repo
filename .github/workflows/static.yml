# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Build Website
  #       run: yarn && yarn workspace @joseph-test-repo/website build
  #     - name: Check Output
  #       run: find ./website/build
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         # Upload static files generated by 
  #         path: './website/build'
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  build-and-publish-helm-charts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Up Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Authenticate Helm to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username $GITHUB_ACTOR --password-stdin
        
        
      - name: Extract Helm Chart Version
        id: extract-version
        run: |
          CHART_VERSION=$(yq eval '.version' ./helm/joseph-chat/Chart.yaml)
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV
        env:
          CHART_VERSION: ""

      - name: Check if Helm Chart Version Exists in GHCR
        id: check-version
        env:
          CHART_VERSION: ${{ env.CHART_VERSION }}
        run: |
          if curl -fsSL -u "${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/sotojn/joseph-chat/tags/list" | \
            jq -r '.tags[]' | grep -qx "$CHART_VERSION"; then
            echo "Helm chart version $CHART_VERSION already exists in GHCR."
            echo "version_exists=true" >> $GITHUB_ENV
          else
            echo "Helm chart version $CHART_VERSION does not exist in GHCR."
            echo "version_exists=false" >> $GITHUB_ENV
          fi

      - name: Package and Update index.yaml
        if: env.version_exists == 'false'
        run: |
          cd ./helm/joseph-chat
          echo $(helm package ./)
          echo "Packaged Helm chart."
          echo $(ls)
          helm repo index . --url oci://ghcr.io/sotojn/joseph-chat-chart:${{ env.CHART_VERSION }}
          echo $(cat index.yaml)
          echo $(ls)
          sed -i 's|/joseph-chat-chart-${{ env.CHART_VERSION }}.tgz||' index.yaml
          echo $(cat index.yaml)

      - name: Commit Updated index.yaml
        if: env.version_exists == 'false'
        run: |
          echo $(ls)
          echo $(find ./helm/joseph-chat/index.yaml)
          echo $(cat ./helm/joseph-chat/index.yaml)
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ./helm/joseph-chat/index.yaml
          git commit -m "Update Helm chart index.yaml for version $CHART_VERSION"
          git push origin main

      - name: Publish Helm Chart to GHCR
        if: env.version_exists == 'false'
        run: |
          cd ./helm/joseph-chat
          echo $(ls)
          CHART_FILE=$(ls joseph-chat-chart-${{ env.CHART_VERSION }}.tgz)
          echo "Publishing $CHART_FILE to GHCR..."
          helm push $CHART_FILE oci://ghcr.io/sotojn
  

  build-website:
    needs: build-and-publish-helm-charts
    runs-on: ubuntu-latest
    # needs: build-release
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version:  22
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Build webiste
        run: yarn && yarn workspace @joseph-test-repo/website build
      - name: Check Output
        run: find ./website/build
      - name: Prepare index.yaml for Website Build
        run: |
          mkdir -p ./website/build/charts/
          cp index.yaml ./website/build/charts/index.yaml
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./website/build

  publish-docs:
    runs-on: ubuntu-latest
    needs: build-website
    permissions:
      pages: write      # to deploy to Pages
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
